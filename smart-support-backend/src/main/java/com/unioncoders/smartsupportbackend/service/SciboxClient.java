package com.unioncoders.smartsupportbackend.service;

import com.unioncoders.smartsupportbackend.model.SciboxResponse;
import com.unioncoders.smartsupportbackend.model.ChangedAnswerResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.Map;

@Service
public class SciboxClient {



    @Value("${scibox.base-url}")
    private String baseUrl;

    @Value("${scibox.api-key}")
    private String apiKey;

    private final TaxonomyProvider taxonomyProvider;

    public SciboxClient(TaxonomyProvider taxonomyProvider) {
        this.taxonomyProvider = taxonomyProvider;
    }

    private final RestTemplate restTemplate = new RestTemplate();

    public SciboxResponse classifyText(String text) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + apiKey);
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map<String, List<String>> taxonomy = taxonomyProvider.getCategories();

        // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å—Ç—Ä–æ–∫—É
        StringBuilder promptBuilder = new StringBuilder("–¢—ã —ç–∫—Å–ø–µ—Ä—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–∞–Ω–∫–∞.\n");
        promptBuilder.append("–û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞. ")
                .append("–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –Ω–∏–∂–µ:\n\n");

        taxonomy.forEach((category, subcategories) -> {
            promptBuilder.append("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ").append(category).append("\n");
            subcategories.forEach(sub -> promptBuilder.append("   - ").append(sub).append("\n"));
        });

        promptBuilder.append("\n–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤ JSON –≤–∏–¥–µ: ")
                .append("{\"category\": \"<–∫–∞—Ç–µ–≥–æ—Ä–∏—è>\", \"subcategory\": \"<–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è>\"}");

        String systemPrompt = promptBuilder.toString();

        Map<String, Object> body = Map.of(
                "model", "Qwen2.5-72B-Instruct-AWQ",
                "messages", new Object[]{
                        Map.of("role", "system", "content", systemPrompt),
                        Map.of("role", "user", "content", text)
                },
                "temperature", 0.3,
                "max_tokens", 256
        );

        HttpEntity<Map<String, Object>> request = new HttpEntity<>(body, headers);
        ResponseEntity<Map> response = restTemplate.postForEntity(baseUrl, request, Map.class);

        Map<String, Object> choices =
                (Map<String, Object>) ((Map) ((java.util.List) response.getBody().get("choices")).get(0)).get("message");
        String content = (String) choices.get("content");

        // üß© –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON-–æ—Ç–≤–µ—Ç
        SciboxResponse result = new SciboxResponse();
        try {
            var mapper = new com.fasterxml.jackson.databind.ObjectMapper();
            SciboxResponse parsed = mapper.readValue(content, SciboxResponse.class);
            return parsed;
        } catch (Exception e) {
            // –µ—Å–ª–∏ –Ω–µ JSON ‚Äî –≤–µ—Ä–Ω—ë–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            result.setCategory(content);
            result.setSubcategory("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é");
            return result;
        }
    }

    public ChangedAnswerResponse normaliseText(String text) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + apiKey);
        headers.setContentType(MediaType.APPLICATION_JSON);

        // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å—Ç—Ä–æ–∫—É
        StringBuilder promptBuilder = new StringBuilder();
        promptBuilder.append("–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –±–∞–Ω–∫–µ.\n");
        promptBuilder.append("–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω:\n");
        promptBuilder.append("‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∂–∞–ª–æ–±—ã –∏–ª–∏ –∞–≥—Ä–µ—Å—Å–∏—é;\n");
        promptBuilder.append("‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∂–∞—Ä–≥–æ–Ω –∏–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã;\n");
        promptBuilder.append("–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —É–∂–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π ‚Äî –≤–µ—Ä–Ω–∏ –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n");
        promptBuilder.append("–ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ ‚Äî –ø–µ—Ä–µ–ø–∏—à–∏ –µ–≥–æ —Å—Ç—Ä–æ–≥–æ –≤ –≤–∏–¥–µ –∑–∞–ø—Ä–æ—Å–∞, –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É, –±–µ–∑ –∏–∑–≤–∏–Ω–µ–Ω–∏–π, –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ª–∏—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n");
        promptBuilder.append("–ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.");


        String systemPrompt = promptBuilder.toString();

        Map<String, Object> body = Map.of(
                "model", "Qwen2.5-72B-Instruct-AWQ",
                "messages", List.of(
                        Map.of("role", "system", "content", systemPrompt),
                        Map.of("role", "user", "content", text)
                ),
                "temperature", 0.3,
                "max_tokens", 256
        );

        HttpEntity<Map<String, Object>> request = new HttpEntity<>(body, headers);
        ChangedAnswerResponse result = new ChangedAnswerResponse();

        try {
            ResponseEntity<Map> response = restTemplate.postForEntity(baseUrl, request, Map.class);
            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                Map<?, ?> responseBody = response.getBody();
                List<Map<String, Object>> choices = (List<Map<String, Object>>) responseBody.get("choices");
                if (choices != null && !choices.isEmpty()) {
                    Map<String, Object> message = (Map<String, Object>) choices.get(0).get("message");
                    String content = (String) message.get("content");
                    result.setText(content);
                } else {
                    result.setText("–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.");
                }
            } else {
                result.setText("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏.");
            }
        } catch (Exception e) {
            result.setText("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
        }

        return result;
    }


}
